// eslint-disable-next-line @typescript-eslint/no-require-imports
const fs = require('fs');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const { paths } = require('../config/codegen.config');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const colors = require('tailwindcss/colors');

const dtsOutPath = paths.generated.colors;

const colorUtilities = [
  'bg', 'text', 'border', 'divide', 'ring', 'outline', 'fill', 'stroke', 'caret', 'accent', 'decoration'
];

const colorClassTypes = [];

// Single-value colors
// TO DO - get single value properties dynamically here
const singleValueColors = ['inherit', 'current', 'transparent', 'black', 'white'];
for (const util of colorUtilities) {
  for (const color of singleValueColors) {
    colorClassTypes.push(`| '${util}-${color}'`);
  }
}

// Multi-step color families
const colorFamilies = Object.keys(colors).filter(
  c => typeof colors[c] === 'object'
);
for (const util of colorUtilities) {
  for (const fam of colorFamilies) {
    const steps = Object.keys(colors[fam]);
    for (const step of steps) {
      colorClassTypes.push(`| '${util}-${fam}-${step}'`);
    }
  }
}

// Add arbitrary value support for each color utility
for (const util of colorUtilities) {
  colorClassTypes.push(`| \
'${util}-[${'string'}]'`);
}

const typeDef = `// AUTO-GENERATED FILE. DO NOT EDIT.
// // Generated by tailSafe ðŸ¦ˆ using tailwindcss/colors

export type TailwindColorClass =
  ${colorClassTypes.join('\n  ')};
`;

fs.writeFileSync(dtsOutPath, typeDef, 'utf8');
// eslint-disable-next-line no-console
console.log('âœ… Color utility type definition written to', dtsOutPath); 