// eslint-disable-next-line @typescript-eslint/no-require-imports
const fs = require('fs');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const path = require('path');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const { cosmiconfigSync } = require('cosmiconfig');
const explorer = cosmiconfigSync('tailsafe');
const userConfigResult = explorer.search();
const userConfig = userConfigResult ? userConfigResult.config : {};
const aliases = userConfig.aliases || {};

if (!userConfigResult) {
    // eslint-disable-next-line no-console
    console.warn('‚ö†Ô∏è  No tailSafe.config.ts found');
    process.exit(1);
}

// 1. Generate ProviderWrapper.tsx
const providerWrapperContent = `// AUTO-GENERATED FILE. DO NOT EDIT.\n// Generated by tailSafe ü¶à
"use client";

import React, { JSX } from "react";
import { AutoTailSafeProvider as TSP, TailSafeProviderProps } from "tailSafe";
import tailSafeConfig from '../tailSafe.config';

export const TailSafeProvider: React.FC<TailSafeProviderProps> = ({
    children,
    debug
}): JSX.Element => {
    return (
        <TSP
            userAliases={tailSafeConfig.aliases}
            debug={debug}
        >
            {children}
        </TSP>
    );
}; 
`;

// 2. Generate TypeScript module augmentation
const lines = [];
for (const alias of Object.keys(aliases)) {
    lines.push(`    '${alias}'?: string | string[] | boolean;`);
}

const output = `// AUTO-GENERATED FILE. DO NOT EDIT.\n// Generated by tailSafe ü¶à
import 'tailSafe';

declare module 'tailsafe' {
  interface TailSafe {
    ${lines.join('\n    ')}
  }
}
`;

// Write to .tailSafe/tailSafe.aliases.d.ts and ProviderWrapper.tsx in the user's project root
const userRoot = process.cwd();
const outDir = path.join(userRoot, '.tailSafe');
if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir, { recursive: true });
}
const outFile = path.join(outDir, 'tailSafe.aliases.d.ts');
fs.writeFileSync(outFile, output);
fs.writeFileSync(path.join(outDir, 'ProviderWrapper.tsx'), providerWrapperContent);